#!/usr/bin/env python
"""Generate requirements.txt or environment.yml from pyproject.toml."""

import argparse
import sys
from pathlib import Path

# Import get_dependencies from scripts/get_dependencies.py
scripts_dir = Path(__file__).resolve().parent
get_deps_path = scripts_dir / "get_dependencies.py"
spec = __import__("importlib.util").util.spec_from_file_location(
  "get_dependencies", get_deps_path
)
get_deps = __import__("importlib.util").util.module_from_spec(spec)
spec.loader.exec_module(get_deps)

HEADER = [
  "# Generated from pyproject.toml.",
  "# Do not edit this file directly.",
]

CONDA_ONLY_PACKAGES = [
  "eigen",
  "boost",
  "python-clang",
]


def write_requirements(filename: str, deps: list[str]) -> None:
  content = "\n".join(HEADER + [dep.strip() for dep in deps]) + "\n"
  Path(filename).write_text(content)


def write_environment(
  filename: str, pip_deps: list[str], name: str = "env", python: str = "3.11"
) -> None:
  lines = HEADER + [
    f"name: {name}",
    "dependencies:",
  ]
  lines.append(f"  - python={python}")
  lines.extend([f"  - {pkg}" for pkg in CONDA_ONLY_PACKAGES])
  lines.extend([f"  - {dep.strip()}" for dep in pip_deps])
  Path(filename).write_text("\n".join(lines) + "\n")


def main():
  parser = argparse.ArgumentParser(
    description="Generate dependency files from pyproject.toml"
  )
  parser.add_argument("--groups", nargs="*", help="Optional dependency groups")
  parser.add_argument(
    "--exclude-core", action="store_true", help="Exclude core dependencies"
  )
  parser.add_argument(
    "--exclude-build",
    action="store_true",
    help="Exclude build-system requirements",
  )
  parser.add_argument(
    "--format", choices=["txt", "yml"], default="txt", help="Output format"
  )
  parser.add_argument(
    "--output",
    default=None,
    help="Output filename (default: requirements.txt or environment.yml)",
  )
  parser.add_argument(
    "--env-name",
    default="pyvinecopulib",
    help="Conda environment name (for .yml only)",
  )
  parser.add_argument(
    "--python-version",
    default="3.11",
    help="Python version (for .yml only)",
  )
  args = parser.parse_args()

  if args.groups is None:
    data = get_deps.parse_pyproject_toml()
    args.groups = list(
      data.get("project", {}).get("optional-dependencies", {}).keys()
    )

  try:
    deps = get_deps.get_dependencies(
      args.groups,
      include_core=not args.exclude_core,
      include_build=not args.exclude_build,
    )
  except Exception as e:
    print(f"Error: {e}", file=sys.stderr)
    sys.exit(1)

  if args.format == "txt":
    filename = args.output or "requirements.txt"
    write_requirements(filename, deps)
  else:
    filename = args.output or "environment.yml"
    write_environment(
      filename, deps, name=args.env_name, python=args.python_version
    )


if __name__ == "__main__":
  main()
